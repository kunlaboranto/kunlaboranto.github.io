#########################################
## Connection Group
#########################################
<CONNECTION_INFO>
    <DB_IP>        127.0.0.1     </DB_IP>
    <SYS_PASSWD>   manager       </SYS_PASSWD>
    <PORT_NO>      20300         </PORT_NO>
    <NLS_USE>      MS949         </NLS_USE>
</CONNECTION_INFO>


#########################################
## REPOSITORY PROPERTY
#########################################
<REPOSITORY_INFO>
    <SITE_NAME> db01        </SITE_NAME># 여러 altimon간에 해당 server를 구분할 고유의 alias
    <DURATION> 30           </DURATION> # 데이타 유지기간. (일단위 지정한다.)
    <DB_IP>    127.0.0.1    </DB_IP>    # 레파지토리서버역할을 할 DB서버 IP
    <PORT_NO>  20300        </PORT_NO>  # 상동
    <NLS_USE>  MS949        </NLS_USE>  # 상동 
    <USER>     SYS          </USER>     # 상동 (갠적으로 altimon이란 user를 만드는게..)
    <PASSWD>   MANAGER      </PASSWD>
</REPOSITORY_INFO>

#########################################
## ALTIMON PROPERTY
#########################################
<ALTIMON_PROPERTY>
    <DATE_FORMAT>   1       </DATE_FORMAT> # 1. yyyy-mm-dd hh:mi:ss   2. mm-dd hh:mi:ss   3. hh:mi:ss
   #<SLEEP_TIME>    120     </SLEEP_TIME>
    <SLEEP_TIME>    60      </SLEEP_TIME>
    <LOG_FILE>      /altibase/work/DBA/mon/logs/ALTIMON_db01.log </LOG_FILE>
    <ALARM_FILE>            </ALARM_FILE>
    <DB_SAVE>       OFF     </DB_SAVE>
    <LISTEN_PORT>           </LISTEN_PORT> 
</ALTIMON_PROPERTY>



#########################################
## PROCESS CHECK PROPERTY
#########################################
<OS_QUERY_GROUP_SET>
    <CPU_USAGE> 8000 </CPU_USAGE>
    <CPU_ACT> 
    </CPU_ACT>
    <MEM_USAGE> 300000000 </MEM_USAGE>
    <MEM_ACT> 
    </MEM_ACT> 
    <DISK_CHK_ENABLE> ON </DISK_CHK_ENABLE>
    <DISK1>  /altibase  </DISK1>
    <DISK1_USAGE> 90 </DISK1_USAGE>
    <DISK_ACT> 
    </DISK_ACT> 
</OS_QUERY_GROUP_SET>


#########################################
## Monitoring query
#########################################
<MONITOR_QUERY_GROUP_SET>

    <MEMSTAT_SUM>
        <QUERY>
             select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,  
                    trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   max_total_mb  </CHECKNAME>
        <CHECKVALUE>    50000    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        ON       </ENABLE>
    </MEMSTAT_SUM>

    <MEM_DATABASE_USE>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   7000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       OFF                  </ENABLE>
    </MEM_DATABASE_USE>

    <MEM_CURR_USE>
        <QUERY>
               select 
                  sum(fixed_alloc_mem+var_alloc_mem) as alloc_mem,
                  sum(fixed_used_mem+var_used_mem) as used_mem
               from v$memtbl_info
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   30  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
    </MEM_CURR_USE>

    <TABLE_USAGE>
        <QUERY>
               select
                  table_name,
                  FIXED_ALLOC_MEM+VAR_ALLOC_MEM alloc,
                  (FIXED_ALLOC_MEM+VAR_ALLOC_MEM)-(FIXED_USED_MEM+VAR_USED_MEM) free
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
    </TABLE_USAGE>

    <MEM_GC>
        <QUERY>
               select
                  name
                  MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT
               from v$memgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
    </MEM_GC>

    <SESSION_COUNT>
        <QUERY> select count(*) as sid_count from v$session </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    sid_count   </CHECKNAME>
        <CHECKVALUE>   2000           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
    </SESSION_COUNT>

    <STATEMENT_COUNT>
        <QUERY> select count(*) as stmt_count from v$statement </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    stmt_count   </CHECKNAME>
        <CHECKVALUE>   20000           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
    </STATEMENT_COUNT>


    <LONG_RUN_QUERY_10>
        <QUERY>
            SELECT
                   ROUND(EXECUTE_TIME/1000/1000,3) EXECUTE_TIME
                 , ROUND(FETCH_TIME/1000/1000,3) FETCH_TIME
                 , ROUND(TOTAL_TIME/1000/1000,3) TOTAL_TIME
                 , EXECUTE_FLAG
                 , 'EXEC SP_SQLTEXT('||SESSION_ID||','||ID||');' SID
                 , RPAD(REPLACE2(REPLACE2(REPLACE2(REPLACE2(QUERY,CHR(10),' '),CHR(9),' '),'    ',' '),'  ',' '),110)||CHR(10) QRY
              FROM V$STATEMENT
             WHERE 1=1
               -- 현재 실행중인 것만 조회
               AND EXECUTE_FLAG = 1
               -- orange 제외
               --and session_id not in (select id from v$session c where c.client_app_info like '%Orange%')
             ORDER BY EXECUTE_TIME DESC, EXECUTE_FLAG DESC
             LIMIT 20
        </QUERY>
        <DISPLAY>    1   </DISPLAY>
        <ENABLE>     ON  </ENABLE>
    </LONG_RUN_QUERY_10>

    <UTRANS_QUERY>
        <QUERY>
            select 
                  st.session_id as sid,
                  ss.comm_name as ip,
                  ss.CLIENT_PID as pid,
                  st.id as stmt_id, 
                  base_time - tr.FIRST_UPDATE_TIME as utrans_time
                  from V$TRANSACTION tr, v$statement st, v$sessionmgr, v$session ss
                  where tr.id = st.tx_id 
                  and st.session_id = ss.id
                  and tr.FIRST_UPDATE_TIME != 0
                  and (base_time - tr.FIRST_UPDATE_TIME) > 60
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </UTRANS_QUERY>

    <REPLICATION_GAP>
        <QUERY>
        select rep_name, rep_gap from v$repgap group by rep_name, rep_gap limit 1 
        </QUERY>
        <CHECKNAME>   rep_gap   </CHECKNAME>
        <CHECKVALUE>  500000000 </CHECKVALUE>
        <COMPARE>     G         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      OFF        </ENABLE>
    </REPLICATION_GAP>

    <REPLICATION_SENDER>
        <QUERY>
        select count(*) as rep_sender from V$REPSENDER 
        </QUERY>
        <CHECKNAME>   rep_sender   </CHECKNAME>
        <CHECKVALUE> 1          </CHECKVALUE>
        <COMPARE>     L         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      OFF        </ENABLE>
    </REPLICATION_SENDER>

    <TBLSPACE_USAGE>
        <QUERY>
                SELECT NAME     , MAX_SIZE as MAX_SZ     , CURR_SIZE CURR     , USED_SIZE USED
                     , (CURR_SIZE - USED_SIZE) AS FREE
                     , USAGE AS 'USAGE(%)'
                 FROM ( SELECT ID
                             , NAME
                             , ROUND(MEM_MAX_DB_SIZE/1024/1024/1024,2) MAX_SIZE 
                             , ROUND(NVL(M.ALLOC_PAGE_COUNT + M.FREE_PAGE_COUNT, TOTAL_PAGE_COUNT)*PAGE_SIZE/1024/1024/1024,2) CURR_SIZE
                             , ROUND(ALLOCATED_PAGE_COUNT*PAGE_SIZE/1024/1024/1024, 2) USED_SIZE
                             , ROUND(ALLOCATED_PAGE_COUNT / (MEM_MAX_DB_SIZE / PAGE_SIZE) * 100, 2) USAGE
                          FROM V$DATABASE D
                             , V$TABLESPACES T
                               LEFT JOIN V$MEM_TABLESPACES M ON T.ID = M.SPACE_ID
                         WHERE T.TYPE IN (0 ,1 ,2 ,8)
                         UNION ALL
                        SELECT ID
                             , NAME
                             , ROUND(D.MAX_SIZE*PAGE_SIZE/1024/1024/1024, 2)
                             , ROUND(TOTAL_PAGE_COUNT*PAGE_SIZE/1024/1024/1024, 2)
                             , ROUND(ALLOCATED_PAGE_COUNT*PAGE_SIZE/1024/1024/1024,2 )
                             , ROUND(ALLOCATED_PAGE_COUNT / D.MAX_SIZE * 100, 2) USAGE
                          FROM
                               V$TABLESPACES T
                               INNER JOIN ( SELECT SPACEID, SUM(decode(MAXSIZE,0,CURRSIZE,MAXSIZE)) AS MAX_SIZE
                                              FROM V$DATAFILES
                                             GROUP BY SPACEID
                                           ) D ON T.ID = D.SPACEID
                      )
                WHERE USAGE >= 70 
                ORDER BY USAGE desc ; 
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </TBLSPACE_USAGE>    

    <WAITLOCK>
        <QUERY>
                select a.TRANS_ID as TX_ID
                     , b.id AS TRANS_SS
                     , a.WAIT_FOR_TRANS_ID AS WAIT_FOR_TRANS_ID
                     , c.id as WAIT_FOR_TRANS_SS 
                     , tb.table_name as tbl_name
                  from v$lock_wait a
                       left outer join v$session b
                               on b.trans_id = a.TRANS_ID
                       left outer join v$session c
                               on c.trans_id = a.WAIT_FOR_TRANS_ID
                       left outer join v$lock lc
                               on lc.trans_id = a.trans_id
                              AND lc.table_oid > 0
                       left outer join system_.sys_tables_ tb
                               on tb.table_oid = lc.table_oid
                              and tb.table_name not like '%_LOG'
                              and tb.table_name not like '%_IF_'
                              and tb.table_name not like '%_IF__'

        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </WAITLOCK>

    <LOCK_CNT>
        <QUERY>
                select sysdate
                     , (select count(*) from v$lock where LOCK_DESC = 'IS_LOCK') AS IS_LOCK
                     , (select count(*) from v$lock where LOCK_DESC = 'IX_LOCK') AS IX_LOCK
                     , (select count(*) from v$lock where LOCK_DESC = 'X_LOCK') AS X_LOCK
                  from dual;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </LOCK_CNT>    

    <PLAN_CACHE_SQL>
        <QUERY>
                 select * from v$sql_plan_cache;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </PLAN_CACHE_SQL>

    <MULTIPLEXING>
        <QUERY>
                 select (select count(*) from v$service_thread) as TOTAL ,
                        (select count(*) from v$service_thread WHERE state = 'EXECUTE') RUN_td ,
                        (select sum(TASK_COUNT) from v$service_thread) as TASK_CNT ,
                        (select sum(READY_TASK_COUNT) from v$service_thread) as READY_TASK ,
                        (select count(*) from v$statement) as STMT
                   from dual
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </MULTIPLEXING>

    <MULTIPLEXING_DETAIL>
        <QUERY>
                SELECT S1.state         as MX_STATE
                     , S1.EXECUTE_FLAG  as EXE_FLAG
                     , count(*)         as CNT 
                  from v$session S
                     , v$service_thread T
                     , v$statement S1
                 where S.id = T.session_id
                   and T.state = 'EXECUTE'
                   and S.current_stmt_id = S1.id
                 group by S1.state, S1.EXECUTE_FLAG
                 order by S1.state, S1.EXECUTE_FLAG
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </MULTIPLEXING_DETAIL>
    <SYSTEM_STAT>
        <QUERY>
                select * From v$sysstat order by 3 desc ;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </SYSTEM_STAT>
    
    <SYSTEM_EVENT>
        <QUERY>
                select EVENT, TOTAL_WAITS, TIME_WAITED, AVERAGE_WAIT, TIME_WAITED_MICRO 
                  from v$system_event order by TIME_WAITED_MICRO desc limit 20;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </SYSTEM_EVENT>    
 
    <MEM_STAT>
        <QUERY>
                select NAME,ALLOC_SIZE,MAX_TOTAL_SIZE
                  from v$memstat order by MAX_TOTAL_SIZE desc limit 20;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </MEM_STAT>    

#    <XID_STAT>
#        <QUERY>
#                select XID_VALUE,ASSOC_SESSION_ID,TRANS_ID,STATE,ux2date(STATE_START_TIME)
#                       ,STATE_DURATION,TX_BEGIN_FLAG,REF_COUNT
#                  from v$xid ;
#        </QUERY>
#        <DISPLAY> 1 </DISPLAY>
#        <ENABLE>  ON </ENABLE>
#    </XID_STAT>
#
#    <2PC_DBA>
#        <QUERY>
#                select LOCAL_TRAN_ID,GLOBAL_TX_ID
#                  from V$DBA_2PC_PENDING  ;
#        </QUERY>
#        <DISPLAY> 1 </DISPLAY>
#        <ENABLE>  ON </ENABLE>
#    </2PC_DBA>

    <SER_TH>
        <QUERY>
                select 'V_SERVICE', ID,TYPE,STATE,RUN_MODE,SESSION_ID,STATEMENT_ID,START_TIME,EXECUTE_TIME,TASK_COUNT,READY_TASK_COUNT
                  from v$service_thread order by 1 ;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  OFF </ENABLE>
    </SER_TH>

    <X_SER_TH>
        <QUERY>
                select 'X_SERVICE', ID,TYPE,STATE,RUN_MODE,SESSION_ID,STATEMENT_ID,START_TIME,EXECUTE_TIME,TASK_COUNT
                     , READY_TASK_COUNT,IN_TASK_COUNT_FROM_IDLE,IN_TASK_COUNT_FROM_BUSY,OUT_TASK_COUNT_IN_IDLE_STATE
                     , OUT_TASK_COUNT_IN_BUSY_STATE,BUSY_EXPERIECENCE_CNT,LIFE_SPAN
                  from x$service_thread order by ID ;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </X_SER_TH>

    <TRANSACTION_MGR>
        <QUERY>
                select TOTAL_COUNT, FREE_LIST_COUNT, BEGIN_ENABLE, ACTIVE_COUNT, SYS_MIN_DISK_VIEWSCN
                  from v$transaction_mgr;
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE>  ON </ENABLE>
    </TRANSACTION_MGR>
</MONITOR_QUERY_GROUP_SET>

