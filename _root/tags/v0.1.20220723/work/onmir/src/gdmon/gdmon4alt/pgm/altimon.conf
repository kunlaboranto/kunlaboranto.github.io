#########################################
## Connection Group
#########################################
<CONNECTION_INFO>
    <DB_IP>        127.0.0.1 </DB_IP>
    <SYS_PASSWD>   manager     </SYS_PASSWD>
    <PORT_NO>      27584       </PORT_NO>
    <NLS_USE>      US7ASCII    </NLS_USE>
</CONNECTION_INFO>


#########################################
## REPOSITORY PROPERTY
#########################################
<REPOSITORY_INFO>
    <SITE_NAME> v880        </SITE_NAME># 여러 altimon간에 해당 server를 구분할 고유의 alias
    <DURATION> 30           </DURATION> # 데이타 유지기간. (일단위 지정한다.)
    <DB_IP>    192.168.1.60 </DB_IP>    # 레파지토리서버역할을 할 DB서버 IP
    <PORT_NO>  27584        </PORT_NO>  # 상동
    <NLS_USE>  US7ASCII     </NLS_USE>  # 상동 
    <USER>     SYS          </USER>     # 상동 (갠적으로 altimon이란 user를 만드는게..)
    <PASSWD>   MANAGER      </PASSWD>
</REPOSITORY_INFO>

#########################################
## ALTIMON PROPERTY
#########################################
<ALTIMON_PROPERTY>
    <DATE_FORMAT>   1    </DATE_FORMAT> # 1. yyyy-mm-dd hh:mi:ss   2. mm-dd hh:mi:ss   3. hh:mi:ss
    <SLEEP_TIME>    30  </SLEEP_TIME>
    <LOG_FILE>      /home2/lim272/ALTIMON/altimon.log </LOG_FILE>
    <ALARM_FILE>       </ALARM_FILE>
    <DB_SAVE>       ON   </DB_SAVE>
    <LISTEN_PORT>   22300 </LISTEN_PORT> 
</ALTIMON_PROPERTY>



#########################################
## PROCESS CHECK PROPERTY
#########################################
<OS_QUERY_GROUP_SET>
    <CPU_USAGE> 200 </CPU_USAGE>
    <CPU_ACT> 
       is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/cpu_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/cpu_act.log.`date +%Y%m%d_%H%M%S` 
    </CPU_ACT>
    <MEM_USAGE> 10240000 </MEM_USAGE>
    <MEM_ACT> 
       is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S` 
    </MEM_ACT> 
    <DISK_CHK_ENABLE> ON </DISK_CHK_ENABLE>
    <DISK1>  /home2  </DISK1>
    <DISK1_USAGE> 70 </DISK1_USAGE>
    <DISK2>  /user3  </DISK2>
    <DISK2_USAGE> 70 </DISK2_USAGE>
    <DISK_ACT> 
    </DISK_ACT> 
# DB 는 살아있는데 접속이 안되는 상황을 고려하여 추가
    <CONNECTION_CHK_ENABLE> ON </CONNECTION_CHK_ENABLE>
    <CONNECTION_CHK_LIMIT>  3  </CONNECTION_CHK_LIMIT>
    <CONNECTION_CHK_ACT>
        echo 'huni : juni, mini papa' >> $ALTIBASE_HOME/altimon/ACTION_LOG/connect_act.log.`date +%Y%m%d_%H%M%S` 
    </CONNECTION_CHK_ACT>
</OS_QUERY_GROUP_SET>


#########################################
## Monitoring query
#########################################
<MONITOR_QUERY_GROUP_SET>
    <LOGFILE_COUNT> 
        <QUERY>
             select  (select OLDEST_LOGFILE from v$log) as old_log,
                     (select current_logfile from v$archive) as curr_log,
                    ((select current_logfile from v$archive) - (select OLDEST_LOGFILE from v$log)) as log_gap
             from dual
        </QUERY>
        <DISPLAY>      1     </DISPLAY>
        <CHECKNAME> log_gap  </CHECKNAME>
        <CHECKVALUE>   200   </CHECKVALUE>
        <COMPARE>      G     </COMPARE>
        <ENABLE>       ON    </ENABLE>
        <ACTION> 
            is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/logfile_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/logfile_act.log.`date +%Y%m%d_%H%M%S` 
        </ACTION> 
    </LOGFILE_COUNT>

    <MEMSTAT_SUM>
        <QUERY>
             select trunc(sum(MAX_TOTAL_SIZE)/1024/1024, 2) as max_total_mb,  
                    trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   max_total_mb  </CHECKNAME>
        <CHECKVALUE>    10240    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        ON       </ENABLE>
        <ACTION> 
           is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEMSTAT_SUM>

    <MEMSTAT_SUM_4370>
        <QUERY>
             select trunc(sum(ALLOC_SIZE)/1024/1024, 2) as current_mb 
             from v$memstat
        </QUERY>
        <DISPLAY>       1        </DISPLAY>
        <CHECKNAME>   current_mb  </CHECKNAME>
        <CHECKVALUE>    10240    </CHECKVALUE>
        <COMPARE>       G        </COMPARE>
        <ENABLE>        OFF      </ENABLE>
        <ACTION> 
           is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEMSTAT_SUM_4370>

    <MEM_DATABASE_USE>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*32/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*32/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   7000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       ON                  </ENABLE>
        <ACTION>
           is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_DATABASE_USE>

    <MEM_DATABASE_USE_4370>
        <QUERY>
               select 
                  trunc(mem_alloc_page_count*8192/1024/1024, 2) as alloc_mem_mb,
                  trunc(mem_free_page_count*8192/1024/1024, 2) as free_mem_mb
               from v$database
        </QUERY>
        <DISPLAY>       1                  </DISPLAY>
        <CHECKNAME>    alloc_mem_mb        </CHECKNAME>
        <CHECKVALUE>   7000                </CHECKVALUE>
        <COMPARE>      G                   </COMPARE>
        <ENABLE>       ON                  </ENABLE>
        <ACTION>
           is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/db_usage.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/db_usage.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_DATABASE_USE_4370>

    <MEM_CURR_USE>
        <QUERY>
               select 
                  sum(fixed_alloc_mem+var_alloc_mem) as alloc_mem,
                  sum(fixed_used_mem+var_used_mem) as used_mem
               from v$memtbl_info
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f $ALTIBASE_HOME/altimon/ACTION_SCRIPT/mem_act.sql -o $ALTIBASE_HOME/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_CURR_USE>

    <TABLE_USAGE>
        <QUERY>
               select
                  table_name,
                  FIXED_ALLOC_MEM+VAR_ALLOC_MEM alloc,
                  (FIXED_ALLOC_MEM+VAR_ALLOC_MEM)-(FIXED_USED_MEM+VAR_USED_MEM) free
               from system_.sys_tables_ a, v$memtbl_info b
               where a.table_oid = b.table_oid
               order by 2;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f /data2/altibase/altimon/ACTION_SCRIPT/mem_act.sql -o /data2/altibase/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </TABLE_USAGE>

    <MEM_GC>
        <QUERY>
               select
                  name
                  MINMEMSCNINTXS-SCNOFTAIL,
                  ADD_OID_CNT-GC_OID_CNT
               from v$memgc;
        </QUERY>
        <DISPLAY>       1          </DISPLAY>
        <CHECKNAME>    used_mem    </CHECKNAME>
        <CHECKVALUE>   1  </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE>       OFF         </ENABLE>
        <ACTION>
           is -silent -f /data2/altibase/altimon/ACTION_SCRIPT/mem_act.sql -o /data2/altibase/altimon/ACTION_LOG/mem_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </MEM_GC>

    <SESSION_COUNT>
        <QUERY> select count(*) as sid_count from v$session </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    sid_count   </CHECKNAME>
        <CHECKVALUE>   1           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
        <ACTION>
        </ACTION>
    </SESSION_COUNT>

    <STATEMENT_COUNT>
        <QUERY> select count(*) as stmt_count from v$statement </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <CHECKNAME>    stmt_count   </CHECKNAME>
        <CHECKVALUE>   1           </CHECKVALUE>
        <COMPARE>      G           </COMPARE>
        <ENABLE> ON </ENABLE>
        <ACTION>
        </ACTION>
    </STATEMENT_COUNT>

    <TBLSPACE_USAGE>
        <QUERY>
        select t.name,  
              trunc (( d.avail -  t.USED_PAGE_CNT ) * t.page_size / 1024 / 1024, 2)  as freesize_mb,  
              trunc ( t.USED_PAGE_CNT / d.avail *  100 , 2 ) as used_per, 
              trunc (d.avail * t.page_size / 1024 / 1024, 2)   as avail_mb , 
              trunc (t.USED_PAGE_CNT * t.page_size / 1024 / 1024, 2) as used_mb 
          from
          (
              select spaceid, sum(decode(autoextend,0,currsize,1,maxsize) ) avail
              from system_.v$datafiles
              group by spaceid
          ) d, SYSTEM_.V$TABLESPACES t
          where t.id = d.spaceid
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> OFF </ENABLE>
    </TBL_SPACE_USAGE>

    <LOCK_DESC>
        <QUERY>
            select b.session_id as sid, 
                   b.tx_id as tId, 
                   b.is_grant as isgran,
                   b.lock_desc as Ldesc, 
                   a.table_name as ltable,
                   trunc(c.total_time/1000000, 4) as eTime
            from system_.sys_tables_ a, v$lock_statement b, v$statement c
            where a.table_oid = b.table_oid
            and   c.session_id = b.session_id
            and   c.tx_id      = b.tx_id
            and   (c.total_time/1000000) > 1
            order by b.tx_id, b.table_oid, b.is_grant, c.total_time
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </LOCK_DESC>

    <LONG_RUN_QUERY>
        <QUERY>
             select b.session_id as sid,
                    a.comm_name as ip,
                    a.client_pid as pid,
                    b.id as stmt_id,
                    trunc(b.total_time/1000000, 4) as rtime
             from  v$session a, v$statement b
             where  a.id = b.session_id
             and    (b.total_time/1000000) > 1
        </QUERY>
        <DISPLAY>    1   </DISPLAY>
        <ENABLE>     ON  </ENABLE>
        <ACTION>
           is -silent -f /data2/altibase/altimon/ACTION_SCRIPT/long_query.sql -o /data2/altibase/altimon/ACTION_LOG/long_query.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </LONG_RUN_QUERY>

    <UTRANS_QUERY>
        <QUERY>
            select 
                  st.session_id as sid,
                  ss.comm_name as ip,
                  ss.CLIENT_PID as pid,
                  st.id as stmt_id, 
                  base_time - tr.FIRST_UPDATE_TIME as utrans_time
                  from V$TRANSACTION tr, v$statement st, v$sessionmgr, v$session ss
                  where tr.id = st.tx_id 
                  and st.session_id = ss.id
                  and tr.FIRST_UPDATE_TIME != 0
                  and (base_time - tr.FIRST_UPDATE_TIME) > 60
        </QUERY>
        <DISPLAY> 1 </DISPLAY>
        <ENABLE> ON </ENABLE>
    </UTRANS_QUERY>

    <REPLICATION_GAP>
        <QUERY>
        select rep_name, rep_gap from v$repgap group by rep_name, rep_gap limit 1 
        </QUERY>
        <CHECKNAME>   rep_gap   </CHECKNAME>
        <CHECKVALUE>  500000000 </CHECKVALUE>
        <COMPARE>     G         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON        </ENABLE>
        <ACTION>
           is -silent -f /data2/altibase/altimon/ACTION_SCRIPT/rep_act.sql -o /data2/altibase/altimon/ACTION_LOG/rep_act.log.`date +%Y%m%d_%H%M%S`
        </ACTION>
    </REPLICATION_GAP>

    <REPLICATION_SENDER>
        <QUERY>
        select count(*) as rep_sender from V$REPSENDER 
        </QUERY>
        <CHECKNAME>   rep_sender   </CHECKNAME>
        <CHECKVALUE> 1          </CHECKVALUE>
        <COMPARE>     L         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON        </ENABLE>
    </REPLICATION_SENDER>

    <REPLICATION_RECEIVER>
        <QUERY>
        select count(*) as rep_receiver from V$REPRECEIVER
        </QUERY>
        <CHECKNAME>   rep_receiver   </CHECKNAME>
        <CHECKVALUE> 1          </CHECKVALUE>
        <COMPARE>     L         </COMPARE>
        <DISPLAY>     1         </DISPLAY>
        <ENABLE>      ON       </ENABLE>
    </REPLICATION_RECEIVER>

</MONITOR_QUERY_GROUP_SET>


