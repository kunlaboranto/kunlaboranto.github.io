CREATE OR REPLACE PROCEDURE GDR_SP_UPD_SQLAREA
(
	A_SAMPLE_ID			IN	VARCHAR(64)
)
/* UPDATE GDR_SQLAREA */
is
	V_SQLCODE				NUMBER;
	V_SQLERRM				VARCHAR(2047);
	V_LOGLVL				VARCHAR(64);

	V_SQL_ID				VARCHAR(64);
	V_SQL_TEXT				VARCHAR(32000);
	V_SESSION_STMT_ID		VARCHAR(64);
	V_SQL_CACHE_TEXT_ID		VARCHAR(64);
	V_EVENT					VARCHAR(128);
	V_LAST_ACTIVE_TIME		DATE;
	V_ELAPSED_TIME			VARCHAR(64);
	V_PVO_TIME				VARCHAR(64);
	V_CPU_TIME				VARCHAR(64);
	V_FETCH_TIME			VARCHAR(64);
	V_DISK_READS			VARCHAR(64);
	V_BUFFER_GETS			VARCHAR(64);
	V_DISK_CREATES			VARCHAR(64);
	V_IS_FULLSCAN			VARCHAR(64);
	V_EXECUTIONS			VARCHAR(64);
	V_FETCHES				VARCHAR(64);
	V_ROWS_MODIFIED			VARCHAR(64);
	V_COMMAND_TYPE			NUMBER;
	V_WAIT_TIME				VARCHAR(64);
	V_PARSE_CALLS			VARCHAR(64);
	V_SAMPLE_CNT			VARCHAR(64);
	V_LAST_STMT_ID			VARCHAR(64);
	V_LAST_SESSION_ID		VARCHAR(64);

    V_PARSING_SCHEMA_NAME	VARCHAR(64);
    V_PLAN_HASH_VALUE		NUMBER;
    V_MODULE				VARCHAR(64);
    V_PREV_PLAN_HASH_VALUE	NUMBER;
    V_PREV_MODULE			VARCHAR(64);
    V_CHK_VERSION_COUNT		NUMBER;

	V_PREV_SAMPLE_ID		VARCHAR(64);
	V_PREV_SAMPLE_TIME		DATE;
    V_LOOP					NUMBER;
    V_CHK					NUMBER;
    V_xx					NUMBER;

-- NO_SQL_CACHE_STMT
-- , GDR_SF_SQLTEXT( SESSION_ID, ID, QUERY ) SQL_TEXT
-- V_SQL_ID := GDR_SF_SQL_ID( V_SQL_TEXT ) ;

/*
 * TODO: [NOTE] 
 * 	(1) (OK) EVENT / WAIT_TIME 은 수행이 종료되면 ( QUERY_START_TIME = 0 ) 값이 Reset 된다.
 * 	(2) WHY EXECUTIONS IS '-' VALUE ?
 * 	(3) (OK) EVENT 값 확인요
 * 	(4) VERSION_COUNT 값 확인요
 * 	(5) FETCHES 가 횟수인지, 누적건수인지 파악요
 * 
 */
    cursor C1 is
SELECT GDR_SF_SQL_ID( SQL_TEXT ) AS SQL_ID , A.* FROM (
SELECT -- GDMON
	   GDR_SF_SQLTEXT( SESSION_ID, ID, QUERY )								AS SQL_TEXT	-- QUERY
	 , MIN(SESSION_ID||','||ID)												AS SESSION_STMT_ID
	 , MIN(SQL_CACHE_TEXT_ID)												AS SQL_CACHE_TEXT_ID
	 , MIN(DECODE( EVENT2, 'no wait event', NULL, EVENT2 ))					AS EVENT
	 , UX2DATE(MIN(LAST_QUERY_START_TIME))									AS LAST_ACTIVE_TIME
	 , SUM(TOTAL_TIME)														AS ELAPSED_TIME
	 , SUM(PARSE_TIME + VALIDATE_TIME + OPTIMIZE_TIME + SOFT_PREPARE_TIME)	AS PVO_TIME
	 , SUM(TOTAL_TIME - FETCH_TIME - WAIT_TIME)								AS CPU_TIME -- EXECUTE_TIME
	 , SUM(FETCH_TIME)														AS FETCH_TIME
	 , SUM(READ_PAGE + UNDO_READ_PAGE)										AS DISK_READS
	 , SUM(GET_PAGE + UNDO_GET_PAGE)										AS BUFFER_GETS
	 , SUM(CREATE_PAGE + UNDO_CREATE_PAGE)									AS DISK_CREATES
	 --, SUM(MEM_CURSOR_FULL_SCAN + DISK_CURSOR_FULL_SCAN)					AS IS_FULLSCAN
	 , SUM(
	 	CASE WHEN ( UPPER( SUBSTR(QUERY,1,64) ) NOT LIKE '%INSERT%' AND MEM_CURSOR_FULL_SCAN + DISK_CURSOR_FULL_SCAN > 0 )
		     THEN 1
			 ELSE 0
		 END)
	   AS IS_FULLSCAN
	 , SUM(EXECUTE_SUCCESS - NVL(EXECUTE_SUCCESS2,0))						AS EXECUTIONS
	 , SUM(FETCH_SUCCESS - NVL(FETCH_SUCCESS2,0))							AS FETCHES
	 , SUM(PROCESS_ROW - NVL(PROCESS_ROW,0))								AS ROWS_MODIFIED
	 , SUM(NVL(WAIT_TIME2,0))												AS WAIT_TIME
	 , SUM( CASE WHEN PARSE_TIME + VALIDATE_TIME + OPTIMIZE_TIME > 0 THEN 1 ELSE 0 END )
	   AS PARSE_CALLS
	 , COUNT(*)																AS SAMPLE_CNT
  FROM GDR_TMP_STATEMENT E
       LEFT OUTER JOIN (
					   SELECT SESSION_ID SESSION_ID2
							, ID ID2
							, EXECUTE_SUCCESS EXECUTE_SUCCESS2
							, FETCH_SUCCESS FETCH_SUCCESS2
							, PROCESS_ROW PROCESS_ROW2
							, WAIT_TIME WAIT_TIME2
							, EVENT EVENT2
						 FROM GDR_TMP_STATEMENT
						WHERE 1=1
						  AND SAMPLE_ID = V_PREV_SAMPLE_ID
						  --AND SQL_CACHE_TEXT_ID = '09710'
					   ) S
	           ON 1=1
			  AND S.SESSION_ID2 = E.SESSION_ID
			  AND S.ID2 = E.ID
 WHERE 1=1
   AND SAMPLE_ID = A_SAMPLE_ID
   AND QUERY_START_TIME = 0
   AND LAST_QUERY_START_TIME > DATE2UX( V_PREV_SAMPLE_TIME, 13 ) / 1000
   --AND SQL_CACHE_TEXT_ID = '2802435'	-- TODO: TEST WITH ONLY 1 VALUE
 GROUP BY GDR_SF_SQLTEXT( SESSION_ID, ID, QUERY )
) A
 ORDER BY 1
;
/*
SELECT -- GDMON
	   ID
	 --, PARENT_ID
	 --, CURSOR_TYPE
	 , SESSION_ID
	 --, TX_ID
	 , QUERY
	 , LAST_QUERY_START_TIME
	 --, QUERY_START_TIME
	 --, FETCH_START_TIME
	 --, STATE
	 --, ARRAY_FLAG
	 --, ROW_NUMBER
	 --, EXECUTE_FLAG
	 --, BEGIN_FLAG
	 , TOTAL_TIME
	 , PARSE_TIME + VALIDATE_TIME + OPTIMIZE_TIME + SOFT_PREPARE_TIME AS PVO_TIME
	 , TOTAL_TIME - FETCH_TIME - WAIT_TIME AS CPU_TIME -- EXECUTE_TIME
	 , FETCH_TIME
	 , SQL_CACHE_TEXT_ID
	 --, SQL_CACHE_PCO_ID
	 --, OPTIMIZER
	 --, COST
	 --, USED_MEMORY
	 , READ_PAGE + UNDO_READ_PAGE AS DISK_READS
	 , GET_PAGE + UNDO_GET_PAGE AS BUFFER_GETS
	 , CREATE_PAGE + UNDO_CREATE_PAGE AS DISK_CREATES
	 --, WRITE_PAGE
	 --, UNDO_WRITE_PAGE
	 , MEM_CURSOR_FULL_SCAN + DISK_CURSOR_FULL_SCAN AS IS_FULLSCAN
	 --, MEM_CURSOR_INDEX_SCAN
	 --, DISK_CURSOR_INDEX_SCAN
	 , EXECUTE_SUCCESS
	 --, EXECUTE_FAILURE
	 , FETCH_SUCCESS
	 --, FETCH_FAILURE
	 , PROCESS_ROW AS ROWS_MODIFIED
	 --, MEMORY_TABLE_ACCESS_COUNT
	 --, SEQNUM
	 , EVENT
	 --, P1
	 --, P2
	 --, P3
	 , WAIT_TIME
	 --, SECOND_IN_TIME
  FROM GDR_TMP_STATEMENT ST
 WHERE 1=1
   AND SAMPLE_ID = A_SAMPLE_ID
   AND QUERY_START_TIME = 0
   AND SQL_CACHE_TEXT_ID = '09710'
 ORDER BY DECODE( ST.SQL_CACHE_TEXT_ID, 'NO_SQL_CACHE_STMT', QUERY, ST.SQL_CACHE_TEXT_ID )
;
*/

	V_STM				DATE;
	V_DTM				NUMBER(15,6);	-- MICROSECOND
	--V_POS				NUMBER;			-- $$PLSQL_LINENO
BEGIN
	V_SQLCODE := 0;
	V_SQLERRM := ' ';
	V_STM := SYSDATE;
	V_DTM := 0;

SYSTEM_.PRINTLN(NULL);

	-- 중복수행 방지
	SELECT COUNT(*) INTO V_CHK
	  FROM DUAL
	 WHERE 1=1
	   AND EXISTS ( SELECT 1 FROM GDR_SQLAREA WHERE LAST_SAMPLE_ID >= A_SAMPLE_ID )
	;

	IF V_CHK != 0 THEN
V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - [ERROR] Already Processed "SAMPLE_ID" - '||A_SAMPLE_ID);
		RETURN;
	END IF;
	   
V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - START !! - A_SAMPLE_ID='||A_SAMPLE_ID);

	--TODO: [OKT] 처리과정에서 오류시, 직전 SAMPLE_ID가 처리가 안되었을 수 있다.
	--{
/*
	SELECT SAMPLE_ID , SAMPLE_TIME
	  INTO V_PREV_SAMPLE_ID , V_PREV_SAMPLE_TIME
	  FROM GDR_HIST_SAMPLESHOT 
	 WHERE SAMPLE_ID < A_SAMPLE_ID 
	 ORDER BY SAMPLE_ID DESC 
	 LIMIT 1;
*/

	SELECT COUNT(*), NVL(MAX(SAMPLE_ID),0) , NVL(MAX(SAMPLE_TIME),TO_DATE('19700101','YYYYMMDD'))
	  INTO V_CHK, V_PREV_SAMPLE_ID , V_PREV_SAMPLE_TIME
	  FROM GDR_HIST_SAMPLESHOT 
	 WHERE SAMPLE_ID < A_SAMPLE_ID 
	   AND SQLAREA_UPDATE_TIME IS NOT NULL
	;

	UPDATE GDR_HIST_SAMPLESHOT
	   SET SQLAREA_UPDATE_TIME = SYSDATE
     WHERE ( SAMPLE_ID > V_PREV_SAMPLE_ID AND SAMPLE_ID <= A_SAMPLE_ID )
	;
	--}


    OPEN C1;
V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - (OKT-01) !!');

	V_LOOP := 0;
    LOOP		--{
        V_LOOP := V_LOOP + 1;

        FETCH C1 INTO V_SQL_ID
					, V_SQL_TEXT
					, V_SESSION_STMT_ID
					, V_SQL_CACHE_TEXT_ID
					, V_EVENT
					, V_LAST_ACTIVE_TIME
					, V_ELAPSED_TIME
					, V_PVO_TIME
					, V_CPU_TIME
					, V_FETCH_TIME
					, V_DISK_READS
					, V_BUFFER_GETS
					, V_DISK_CREATES
					, V_IS_FULLSCAN
					, V_EXECUTIONS
					, V_FETCHES
					, V_ROWS_MODIFIED
					, V_WAIT_TIME
					, V_PARSE_CALLS
					, V_SAMPLE_CNT
                    ;
        EXIT WHEN C1%NOTFOUND;
--V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - (OKT-01-1) - '||V_LOOP);

		IF V_EXECUTIONS < 0 THEN
			V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - [TODO] V_EXECUTIONS MUST Not Minus !! - A_SAMPLE_ID='||A_SAMPLE_ID||','||V_SQL_ID  );
		END IF;

		V_LAST_SESSION_ID := SUBSTR(V_SESSION_STMT_ID, 1, INSTR(V_SESSION_STMT_ID,',')-1) ;
		V_LAST_STMT_ID := SUBSTR(V_SESSION_STMT_ID, INSTR(V_SESSION_STMT_ID,',')+1, 64) ;

		SELECT COUNT(*) 
			 , MIN(PLAN_HASH_VALUE)
			 , MIN(MODULE)
		  INTO V_CHK 
		     , V_PREV_PLAN_HASH_VALUE
			 , V_PREV_MODULE
		  FROM GDR_SQLAREA 
		 WHERE SQL_ID = V_SQL_ID
		;

		IF V_CHK = 0 THEN
		--{
			V_COMMAND_TYPE := 
			-- 1: CREATE , 2: I, 3: S, 6: U, 7: D, 26: LOCK TABLE, 47: BEGIN, 170: CALL, 189: MERGE, ?:  MOVE,
			CASE WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%CREATE%TABLE%'	THEN 1
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%INSERT%'			THEN 2
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%SELECT%'			THEN 3
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%UPDATE%'			THEN 6
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%DELETE%'			THEN 7
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%CREATE%INDEX%'	THEN 9
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%ALTER%INDEX%'		THEN 11
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%GRANT%'			THEN 17
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%LOCK%TABLE%'		THEN 26
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%ALTER%SESSION%'	THEN 42
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%COMMIT%'			THEN 44
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%SAVEPOINT%'		THEN 46
				 WHEN (  UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%BEGIN%' 
				      OR UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%DECLARE%' )	THEN 47		-- PL/SQL Block
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%SET%TRANSACTION%'	THEN 48
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%EXPLAIN%'			THEN 50
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%ROLLBACK%'		THEN 55
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%ANALYZE%TABLE%'	THEN 62
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%SET%CONSTRAINTS%'	THEN 90
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%MOVE%'			THEN -72	-- Altibase Only
				 WHEN (  UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%EXEC%' 
				      OR UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%CALL%'
				      OR UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%EXECUTE%' )	THEN 170	-- CALL
				 WHEN UPPER( SUBSTR(V_SQL_TEXT,1,64) ) LIKE '%MERGE%'			THEN 189
				 ELSE NULL
			 END
			;

			BEGIN
				SELECt DB_USERNAME 
				  INTO V_PARSING_SCHEMA_NAME 
				  FROM GDR_TMP_SESSION 
				 WHERE ID = V_LAST_SESSION_ID 
				 ORDER BY SAMPLE_ID DESC
				 LIMIT 1;
			EXCEPTION
				WHEN OTHERS THEN
					V_PARSING_SCHEMA_NAME := NULL;
					NULL;
			END;

			BEGIN
				-- 존재하지 않을 수도 있다, UPD에서도 수행한다.
				SELECt PLAN_HASH_VALUE 
					 , FIRST_MODULE
				  INTO V_PLAN_HASH_VALUE 
					 , V_MODULE
				  FROM GDR_HIST_SQL_PLAN 
				 WHERE SQL_ID = V_SQL_ID 
				   --AND CREATED > SYSDATE - 1 
				 ORDER BY CREATED DESC 
				 LIMIT 1;
			EXCEPTION
				WHEN OTHERS THEN
					V_PLAN_HASH_VALUE := 0 ;
					V_MODULE := NULL ;
					NULL;
			END;

--V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - (OKT-01-2) - '||V_SQL_ID||','||V_SQL_CACHE_TEXT_ID);

		IF V_LOGLVL IN ( 'E', 'W', 'I', 'D' ) THEN
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_PLAN_HASH_VALUE=['||V_PLAN_HASH_VALUE||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_LAST_ACTIVE_TIME=['||V_LAST_ACTIVE_TIME||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_PARSING_SCHEMA_NAME=['||V_PARSING_SCHEMA_NAME||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_MODULE=['||V_MODULE||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_COMMAND_TYPE=['||V_COMMAND_TYPE||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_BUFFER_GETS=['||V_BUFFER_GETS||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_EVENT=['||V_EVENT||']' );
			--SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_SQL_TEXT=['||V_SQL_TEXT||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_SQL_TEXT=['||LENGTHB(V_SQL_TEXT)||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_SAMPLE_CNT=['||V_SAMPLE_CNT||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] A_SAMPLE_ID=['||A_SAMPLE_ID||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_LAST_SESSION_ID=['||V_LAST_SESSION_ID||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_LAST_STMT_ID=['||V_LAST_STMT_ID||']' );
			SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] V_xx=['||V_xx||']' );
		END IF;

		INSERT INTO GDR_SQLAREA
			( SQL_ID
			, SQL_CACHE_TEXT_ID
			, PLAN_HASH_VALUE
			, FIRST_LOAD_TIME
			, LAST_ACTIVE_TIME
			, PARSING_SCHEMA_NAME
			, MODULE
			, CPU_TIME
			, ELAPSED_TIME
			, PVO_TIME
			, FETCH_TIME
			, PARSE_CALLS
			, ROWS_MODIFIED							-- 누적
			, COMMAND_TYPE
			, FETCHES								-- 누적
			, EXECUTIONS							-- 누적
			, WAIT_TIME
			, DISK_READS
			, BUFFER_GETS
			, DISK_CREATES
			, VERSION_COUNT
			, IS_FULLSCAN
			, EVENT
			, SQL_TEXT
			, LAST_SAMPLE_CNT
			, LAST_SAMPLE_ID
			, LAST_SESSION_ID
			, LAST_STMT_ID
			--, LAST_UPDATE_TIME
			)
		VALUES
			( V_SQL_ID
			, V_SQL_CACHE_TEXT_ID
			, V_PLAN_HASH_VALUE
			, V_LAST_ACTIVE_TIME					-- V_FIRST_LOAD_TIME
			, V_LAST_ACTIVE_TIME
			, V_PARSING_SCHEMA_NAME
			, V_MODULE
			, V_CPU_TIME
			, V_ELAPSED_TIME
			, V_PVO_TIME
			, V_FETCH_TIME
			, V_PARSE_CALLS
			, V_ROWS_MODIFIED
			, V_COMMAND_TYPE
			, V_FETCHES
			, V_EXECUTIONS
			, V_WAIT_TIME
			, V_DISK_READS
			, V_BUFFER_GETS
			, V_DISK_CREATES
			, DECODE( V_PLAN_HASH_VALUE, 0, 0, 1 )	-- VERSION_COUNT
			, V_IS_FULLSCAN
			, V_EVENT
			, V_SQL_TEXT
			, V_SAMPLE_CNT
			, A_SAMPLE_ID
			, V_LAST_SESSION_ID
			, V_LAST_STMT_ID
			--, V_LAST_UPDATE_TIME
			)
		;

--	RAISE_APPLICATION_ERROR( 990000 + MOD(V_SQLCODE,1000) , V_SQLERRM );	-- ALTIBASE ( 990000 ~ 991000 )

		--}
		ELSE
		--{
			BEGIN
				-- 존재하지 않을 수도 있다, UPD에서도 수행한다.
				SELECt PLAN_HASH_VALUE 
					 , FIRST_MODULE
				  INTO V_PLAN_HASH_VALUE 
					 , V_MODULE
				  FROM GDR_HIST_SQL_PLAN 
				 WHERE SQL_ID = V_SQL_ID 
				   --AND CREATED > SYSDATE - 1 
				 ORDER BY CREATED DESC 
				 LIMIT 1;
			EXCEPTION
				WHEN OTHERS THEN
					V_PLAN_HASH_VALUE := 0 ;
					V_MODULE := NULL ;
					NULL;
			END;

			 IF V_PREV_PLAN_HASH_VALUE <> V_PLAN_HASH_VALUE AND V_PLAN_HASH_VALUE <> 0 THEN
			 	V_CHK_VERSION_COUNT := 1;
			 END IF;

			UPDATE GDR_SQLAREA
			   SET LAST_ACTIVE_TIME		= V_LAST_ACTIVE_TIME
			     , FIRST_LOAD_TIME		= DECODE( V_CHK_VERSION_COUNT, 1, V_LAST_ACTIVE_TIME, FIRST_LOAD_TIME )
			     , VERSION_COUNT		= DECODE( V_CHK_VERSION_COUNT, 1, VERSION_COUNT + 1, VERSION_COUNT )
			     , PLAN_HASH_VALUE		= V_PLAN_HASH_VALUE
			     , MODULE				= DECODE( V_CHK_VERSION_COUNT, 1, V_MODULE, MODULE )
			     , SQL_CACHE_TEXT_ID	= DECODE( V_SQL_CACHE_TEXT_ID, 'NO_SQL_CACHE_STMT', SQL_CACHE_TEXT_ID, V_SQL_CACHE_TEXT_ID )
			     , CPU_TIME				= CPU_TIME + V_CPU_TIME
			     , ELAPSED_TIME			= ELAPSED_TIME + V_ELAPSED_TIME
			     , PVO_TIME				= PVO_TIME + V_PVO_TIME
			     , FETCH_TIME			= FETCH_TIME + V_FETCH_TIME
			     , PARSE_CALLS			= PARSE_CALLS + V_PARSE_CALLS
			     , ROWS_MODIFIED		= ROWS_MODIFIED + V_ROWS_MODIFIED
			     , FETCHES				= FETCHES + V_FETCHES
			     , EXECUTIONS			= EXECUTIONS + V_EXECUTIONS
			     , WAIT_TIME			= WAIT_TIME + V_WAIT_TIME
			     , DISK_READS			= DISK_READS + V_DISK_READS
			     , BUFFER_GETS			= BUFFER_GETS + V_BUFFER_GETS
			     , DISK_CREATES			= DISK_CREATES + V_DISK_CREATES
			     , IS_FULLSCAN			= IS_FULLSCAN + V_IS_FULLSCAN
			     , EVENT				= NVL(V_EVENT, EVENT)
			     --, SQL_TEXT			= V_SQL_TEXT
			     , LAST_SAMPLE_CNT 		= LAST_SAMPLE_CNT + V_SAMPLE_CNT
			     , LAST_SAMPLE_ID		= A_SAMPLE_ID
			     , LAST_SESSION_ID		= V_LAST_SESSION_ID
			     , LAST_STMT_ID			= V_LAST_STMT_ID
			     , LAST_UPDATE_TIME		= SYSDATE
			     --, xx				= xx + V_xx
			 WHERE 1=1
			   AND SQL_ID = V_SQL_ID
			;
		--}
		END IF;
--V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - (OKT-01-3) - '||V_LOOP);

	END LOOP;	--}

	CLOSE C1;
V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - (OKT-02) !!');


	--COMMIT;
V_STM := GDR_SF_CHECKTIME( V_STM, V_DTM ); SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ['||V_DTM||'] GDR_SP_UPD_SQLAREA - END !! - A_SAMPLE_ID='||A_SAMPLE_ID);

EXCEPTION
    WHEN OTHERS THEN
		V_SQLCODE := SQLCODE ;
		V_SQLERRM := SQLERRM ;
		SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] [ERROR] A_SAMPLE_ID='||A_SAMPLE_ID );
		SYSTEM_.PRINTLN('['||TO_CHAR(SYSDATE,'YYYY/MM/DD HH24:MI:SS.FF6')||'] ERR-'||V_SQLCODE||' '||V_SQLERRM );

		CLOSE C1;	-- ERR-1104E : One or more statement exists. 
		--ROLLBACK;
		RAISE_APPLICATION_ERROR( 990000 + MOD(V_SQLCODE,1000) , V_SQLERRM );	-- ALTIBASE ( 990000 ~ 991000 )
END;
/
